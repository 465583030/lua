{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"if",
				"ife\tif err != nil { ... } ʂ"
			],
			[
				"can",
				"CanSet\tbool ƒ"
			],
			[
				"Can",
				"CanSet\tbool ƒ"
			],
			[
				"fi",
				"FieldByName\treflect.Value ƒ"
			],
			[
				"v",
				"ValueOf\treflect.Value ƒ"
			],
			[
				"Is",
				"IsValid\tbool ƒ"
			],
			[
				"Ma",
				"MapKeys\t[]reflect.Value ƒ"
			],
			[
				"S",
				"Set\t ƒ"
			],
			[
				"Slic",
				"SliceOf\treflect.Type ƒ"
			],
			[
				"ma",
				"MakeSlice\treflect.Value ƒ"
			],
			[
				"k",
				"Kind\treflect.Kind ƒ"
			],
			[
				"Make",
				"MakeSlice\treflect.Value ƒ"
			],
			[
				"K",
				"Kind\treflect.Kind ƒ"
			],
			[
				"GO",
				"GOPATH"
			]
		]
	},
	"buffers":
	[
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 20652,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "api.go",
			"settings":
			{
				"buffer_size": 32621,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 196.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"GoSublime: Add/Remove package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 183.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Y/Projects/Go/src/github.com/milochristiansen/lua"
	],
	"file_history":
	[
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/state.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/supermeta/script_test.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/supermeta/tables.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/supermeta/supermeta.go",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/something_borrowed/diff_match_patch/__init__.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/CHANGELOG.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/AUTHORS.md",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/vm.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/example_test.go",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/9o.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/USAGE.md",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/value.go",
		"/Y/Projects/Go/src/dctech/rhino/genii/struct.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/api_test.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/script_test.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/testhelp/testhelp.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/luautil/testhelper.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/luautil/errors.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/luautil/strconv.go",
		"/Y/Projects/Go/src/rubble8/scripting/dctech_lua/metatables.go",
		"/Y/Projects/Go/src/dctech/rhino/genii/array.go",
		"/Y/Projects/Go/src/dctech/rhino/genii/guts.go",
		"/Y/Projects/Go/src/rubble8/std_lib/docs/Rubble Changelog.md",
		"/Y/Projects/Go/src/rubble8/scripting/dctech_lua/api.go",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/GoSublime.sublime-settings",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/User/GoSublime.sublime-settings",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/User/GoSublime-aux.sublime-settings",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/GoSublime.tmLanguage",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/GoSublime.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/.no-sublime-package",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/settings/GoSublime-Go.sublime-settings",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/Main.sublime-menu",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/GsDoc.hidden-tmLanguage",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/syntax/GoSublime-Go.tmLanguage.json",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/settings/Comments.tmPreferences",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/settings/Comments.tmPreferences.json",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/articles/shell.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/articles/golint.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/doc/autoinst.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/README.md",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/ast/ast.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/compile.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/compile_expr.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/dumpbin.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/fib_test.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/callframe.go",
		"/Y/Projects/Go/src/github.com/milochristiansen/lua/api.go",
		"/Y/Projects/Go/src/DeskAdv/dump_legacy.go",
		"/Y/Projects/Go/src/DeskAdv/dta_format.go",
		"/C/Users/Milo/Desktop/MilOS.txt",
		"/C/Users/Milo/Desktop/Music.mp3",
		"/C/Users/Milo/Desktop/rawextract.pl",
		"/C/Games/Assassin's Creed Unity/acu.reg",
		"/C/Users/Milo/Desktop/DF Keys To change.txt",
		"/C/Users/Milo/Desktop/Toad.txt",
		"/C/Users/Milo/Desktop/world.sav Format.txt",
		"/C/Users/Milo/Desktop/Clock-v3.exe",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/GoSublime.tmLanguage.json",
		"/Y/Bin/GoPath.bat",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/SUPPORT.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/mg9.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/about.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/sh.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/gs.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/ev.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/kv.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/gsshell.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/gsq.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/gspatch.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gosubl/__init__.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gstest.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gsdoc.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gspalette.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gslint.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gsev.py",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/gssynforce.py",
		"/Y/Projects/Go/src/rubble8/iapply.go",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime-r16.07.09-1/USAGE.md",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime/Default (Windows).sublime-keymap",
		"/C/Users/Milo/AppData/Roaming/Sublime Text 3/Packages/GoSublime-r16.07.09-1/GoSublime.sublime-settings",
		"/Y/Projects/Go/src/rubble8/rblutil/log.go",
		"/Y/Projects/Go/src/rubble8/tileset.go",
		"/C/Users/Milo/Desktop/autoSyndrome.cpp"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"print",
			"TODO:",
			"ErrBadConv",
			"ErrCantConv",
			"fromErr",
			"ErrCantConv",
			"ErrCantSet",
			"assertBlock(t,",
			" STyp",
			" Typ",
			"assertTyp",
			"assertBlock",
			"mkState",
			"Recover",
			"retBase",
			"ReturnFrame",
			"o := reflect.ValueOf(l.ToUser(1))",
			"ErrCantSet",
			"return ErrCantSet",
			"\n\t\tif k >= int64(o.Len()) || k < 0 {\n\t\t\treturn 0\n\t\t}\n",
			"))\n",
			".Type().Kind()",
			"\n8.5.1 (For DF 43.5) Minor internal cleanup.\n------------------------------------------------------------------------------------------------------------------------\n",
			"ForEachInTable",
			"\n// ForEachInTable is a simple wrapper around GetIter and is provided as a convenience.\n//\n// The given function is called once for every item in the table at t. For each call of the\n// function the value is at -1 and the key at -2. You MUST keep the stack balanced inside\n// the function! Do not pop the key and value off the stack before returning!\n//\n// Little to no error checking is done, as this is a simple convenience wrapper around\n// a common sequence of public API functions.\nfunc (l *State) ForEachInTable(t int, f func()) {\n\t// I never guessed that FORTH style stack comments would be useful in Go...\n\tl.GetIter(t)    // -- iter\n\tl.PushIndex(-1) // iter -- iter iter\n\tl.Call(0, 2)    // iter -- key value\n\tfor !l.IsNil(-2) {\n\t\tf()\n\n\t\tl.Pop(2)        // key value --\n\t\tl.PushIndex(-1) // iter -- iter iter\n\t\tl.Call(0, 2)    // iter -- key value\n\t}\n\tl.Pop(3) // key value iter --\n}\n",
			"//\n",
			"\n// Protect calls f inside an error handler. Use when you need to use API functions that may \"raise errors\" outside of\n// other error handlers (such as PCall).\n//\n// Unlike PCall Protect does NOT clean the stack, generate a script stack trace, or close upvalues. Do NOT call script\n// code inside this function unless it is protected by PCall!\nfunc (l *State) Protect(f func()) (err error) {\n\tdefer func() {\n\t\te := recover()\n\t\tif e != nil {\n\t\t\t// Generate a native trace if requested.\n\t\t\ttrace := \"\"\n\t\t\tif l.NativeTrace {\n\t\t\t\tbuf := make([]byte, 4096)\n\t\t\t\tbuf = buf[:runtime.Stack(buf, true)]\n\t\t\t\ttrace = fmt.Sprintf(\"Native Trace:\\n%s\\n\", buf)\n\t\t\t}\n\n\t\t\t// Attach the stack trace to the error\n\t\t\tswitch e2 := e.(type) {\n\t\t\tcase luautil.Error:\n\t\t\t\te2.Trace = trace\n\t\t\t\terr = e2\n\t\t\tcase error:\n\t\t\t\terr = luautil.Error{Type: luautil.ErrTypWrapped, Err: e2, Trace: trace}\n\t\t\tdefault:\n\t\t\t\terr = luautil.Error{Type: luautil.ErrTypEvil, Err: fmt.Errorf(\"%v\", e), Trace: trace}\n\t\t\t}\n\t\t}\n\t}()\n\treturn nil\n}\n",
			"\n// PCall is exactly like Call, except instead of panicking when it encounters an error the\n// error is cleanly recovered and returned.\n// On error the stack is reset to the way it was before the call minus the function and it's arguments,\n// the State may then be reused.\nfunc (l *State) PCall(args, rtns int) (err error) {\n\tframes := len(l.stack.frames)\n\ttop := len(l.stack.data) - args - 1\n\tdefer func() {\n\t\te := recover()\n\t\tif e != nil {\n\t\t\t// Compile a stack trace.\n\t\t\t// TODO: The produced trace is terrible, do this properly.\n\t\t\tsources := []string{}\n\t\t\tlines := []int{}\n\t\t\tfor i := len(l.stack.frames) - 1; i >= frames; i-- {\n\t\t\t\tframe := l.stack.frames[i]\n\t\t\t\tif frame.fn.native == nil {\n\t\t\t\t\tsources = append(sources, frame.fn.proto.source)\n\t\t\t\t\tif int(frame.pc) < len(frame.fn.proto.lineInfo) {\n\t\t\t\t\t\tlines = append(lines, frame.fn.proto.lineInfo[frame.pc])\n\t\t\t\t\t} else if len(frame.fn.proto.lineInfo) > 0 {\n\t\t\t\t\t\tlines = append(lines, frame.fn.proto.lineInfo[len(frame.fn.proto.lineInfo)-1])\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlines = append(lines, -1)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsources = append(sources, \"(native code)\")\n\t\t\t\t\tlines = append(lines, -1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttrace := \"\"\n\t\t\tfor i := range sources {\n\t\t\t\tif lines[i] == -1 {\n\t\t\t\t\ttrace += fmt.Sprintf(\"\\n    \\\"%v\\\"\", sources[i])\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\ttrace += fmt.Sprintf(\"\\n    \\\"%v\\\": <line: %v>\", sources[i], lines[i])\n\t\t\t}\n\n\t\t\tif l.NativeTrace {\n\t\t\t\tbuf := make([]byte, 4096)\n\t\t\t\tbuf = buf[:runtime.Stack(buf, true)]\n\t\t\t\ttrace = fmt.Sprintf(\"%v\\n\\nNative Trace:\\n%s\\n\", trace, buf)\n\t\t\t}\n\n\t\t\t// Before we strip the stack we need to close all upvalues in the section we will be stripping, just in\n\t\t\t// case a closure was assigned to another upvalue.\n\t\t\tl.stack.frames[len(l.stack.frames)-1].closeUpAbs(top)\n\n\t\t\t// Make sure the stack is back to the way we found it, minus the function and it's arguments.\n\t\t\tl.stack.frames = l.stack.frames[:frames]\n\t\t\tfor i := len(l.stack.data) - 1; i >= top; i-- {\n\t\t\t\tl.stack.data[i] = nil\n\t\t\t}\n\t\t\tl.stack.data = l.stack.data[:top]\n\n\t\t\t// Attach the stack trace to the error\n\t\t\tswitch e2 := e.(type) {\n\t\t\tcase luautil.Error:\n\t\t\t\te2.Trace = trace\n\t\t\t\terr = e2\n\t\t\tcase error:\n\t\t\t\terr = luautil.Error{Type: luautil.ErrTypWrapped, Err: e2, Trace: trace}\n\t\t\tdefault:\n\t\t\t\terr = luautil.Error{Type: luautil.ErrTypEvil, Err: fmt.Errorf(\"%v\", e), Trace: trace}\n\t\t\t}\n\t\t}\n\t}()\n\n\tl.Call(args, rtns)\n\treturn nil\n}\n",
			"\"\n",
			"\\t",
			"    ",
			"GO_VERSION",
			"MarGo",
			"windows"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"testhelp.AssertBlock(t, testhelp.MkState(),",
			" lua.STyp",
			" lua.Typ",
			"testhelp.AssertTyp",
			"testhelp.AssertBlock",
			"testhelp.MkState",
			"o := l.ToUser(1).(reflect.Value)",
			".Kind()",
			"\t",
			"\\t"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20652,
						"regions":
						{
						},
						"selection":
						[
							[
								11836,
								11836
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "api.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32621,
						"regions":
						{
						},
						"selection":
						[
							[
								856,
								856
							]
						],
						"settings":
						{
							"rulers":
							[
								120
							],
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o://C:\\Program Files\\Sublime Text 3":
	{
		"height": 118.0
	},
	"output.9o://Y:\\Projects\\Go\\src\\github.com\\milochristiansen\\lua":
	{
		"height": 118.0
	},
	"output.9o://Y:\\Projects\\Go\\src\\github.com\\milochristiansen\\lua\\supermeta":
	{
		"height": 185.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "lua.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
